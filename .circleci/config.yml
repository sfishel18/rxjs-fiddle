version: 2.1
jobs:
  Build and Publish Image:
    parameters:
      tag:
        type: string
        default: latest
      should-tag-latest:
        type: boolean
        default: false

    docker:
      - image: docker:latest

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: echo "${GCLOUD_SERVICE_KEY}" | docker login -u _json_key --password-stdin https://gcr.io
      - run: docker build -t gcr.io/rxjs-fiddle/frontend:<< parameters.tag >> -f Dockerfile .
      - when:
          condition: << parameters.should-tag-latest >>
          steps:
            - run: docker build -t gcr.io/rxjs-fiddle/frontend:latest -f Dockerfile .
      - run: docker push gcr.io/rxjs-fiddle/frontend

  Bump Git Tag:
    docker:
      - image: gcr.io/rxjs-fiddle/ci/gitversion:0.0.8
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}

    steps:
      - add_ssh_keys:
          fingerprints:
            - 'f9:48:ae:4c:7a:46:c9:f1:b4:8d:a3:4a:5c:03:37:9a'
      - checkout
      - run: gitversion bump auto
      - run: git push origin --tags
  Deploy:
    parameters:
      env:
        type: string
      image-tag:
        type: string

    docker:
      - image: gcr.io/rxjs-fiddle/ci/gcloud:0.0.13
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}

    steps:
      - checkout
      - run: echo ${GCLOUD_SERVICE_KEY} > keyfile.json
      - run: gcloud auth activate-service-account ${GCLOUD_SERVICE_NAME} --key-file keyfile.json
      - run: gcloud container clusters get-credentials rxjs-fiddle-cluster --zone us-central1-a --project rxjs-fiddle
      - run: kubectl create secret generic http-auth --from-literal=".htpasswd=$(htpasswd -nb ${STAGING_USER} ${STAGING_PASSWORD})" -o yaml --dry-run | kubectl replace -n << parameters.env >> -f -
      - run: kubectl apply -f k8s/env-configs.yml
      - run: IMAGE_TAG=<< parameters.image-tag >> envsubst < k8s/deployment.yml | kubectl apply -n << parameters.env >> -f -
      - run: IMAGE_TAG=<< parameters.image-tag >> envsubst < k8s/service.yml | kubectl apply -n << parameters.env >> -f -
      - run: kubectl annotate -n << parameters.env >> deployment/rxjs-fiddle-frontend-deployment kubernetes.io/change-cause="image updated to << parameters.image-tag >>"
  Rollback:
    parameters:
      env:
        type: string

    docker:
      - image: gcr.io/rxjs-fiddle/ci/gcloud:0.0.13
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}

    steps:
      - run: echo ${GCLOUD_SERVICE_KEY} > keyfile.json
      - run: gcloud auth activate-service-account ${GCLOUD_SERVICE_NAME} --key-file keyfile.json
      - run: gcloud container clusters get-credentials rxjs-fiddle-cluster --zone us-central1-a --project rxjs-fiddle
      - run: kubectl rollout undo -n << parameters.env >> deployment/rxjs-fiddle-frontend-deployment

workflows:
  Deploy to Staging for Commits to Master:
    jobs:
      - Build and Publish Image:
          tag: ${CIRCLE_SHA1}
          should-tag-latest: true
          filters:
            branches:
              only: master
      - Deploy:
          env: staging
          image-tag: ${CIRCLE_SHA1}
          requires:
            - Build and Publish Image
          filters:
            branches:
              only: master
      - Hold for Deploy To Production:
          type: approval
          requires:
            - Deploy
          filters:
            branches:
              only: master
      - Bump Git Tag:
          requires:
            - Hold for Deploy To Production
          filters:
            branches:
              only: master

  Deploy to Production for Tags:
    jobs:
      - Build and Publish Image:
          tag: ${CIRCLE_TAG}
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - Deploy:
          env: default
          image-tag: ${CIRCLE_TAG}
          requires:
            - Build and Publish Image
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - Hold for Rollback:
          type: approval
          requires:
            - Deploy
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - Rollback:
          env: default
          requires:
            - Hold for Rollback
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
